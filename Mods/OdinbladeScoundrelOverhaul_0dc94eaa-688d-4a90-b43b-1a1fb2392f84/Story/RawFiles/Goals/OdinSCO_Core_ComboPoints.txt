Version 1
SubGoalCombiner SGC_AND
INITSECTION

KBSECTION
//REGION Bonus Combo on combat entry
//Track combat entry and begin bonus processing in Lua
IF
ObjectEnteredCombat(_Character, _CombatID)
AND
NOT DB_OBSCO_TrackCombat(_CombatID, _Character)
THEN
DB_OBSCO_TrackCombat(_CombatID, _Character);
OBSCO_LUA_EnterCombatComboPoints((CHARACTERGUID)_Character);

//Cleanup combat instance tracking after completion
IF
CombatEnded(_CombatID)
AND
DB_OBSCO_TrackCombat(_CombatID, _Character)
THEN
NOT DB_OBSCO_TrackCombat(_CombatID, _Character);
//END_REGION

//REGION Deadly Flourish
//When the character uses Deadly Flourish, activate their Combo points
IF
CharacterUsedSkill(_Character, "Shout_OdinSCO_DeadlyFlourish", _, _)
THEN
OBSCO_LUA_ActivateComboPoints(_Character);

//Refreshes the Deadly Flourish skill in the UI
PROC
ProcObjectTimerFinished((CHARACTERGUID)_Character, "ODINSCO_FLICKER_DEADLYFLOURISH")
THEN
NRD_SkillSetCooldown(_Character, "Shout_OdinSCO_DeadlyFlourish", 0.0);
//END_REGION

//REGION Cleanup Combo
//When the character leaves combat, remove all Combo points
IF
ObjectLeftCombat(_Character, _)
THEN
OBSCO_CleanupCombo(_Character);

PROC
OBSCO_CleanupCombo((GUIDSTRING)_Character)
AND
CharacterHasSkill((CHARACTERGUID)_Character, "Shout_OdinSCO_DeadlyFlourish", 1)
THEN
OBSCO_LUA_ConsumeComboPoints((CHARACTERGUID)_Character);
//END_REGION

//REGION Apply activated combo bonuses
//Whenever a character is hit, jump to Lua to check if processing is required
IF
NRD_OnHit(_Target, _Character, _, _HitHandle)
AND
NRD_StatusGetString(_Target, _HitHandle, "SkillId", _ProtoId)
AND
OBSCO_LUA_GetSkillEntryName(_ProtoId, _SkillId)
THEN
OBSCO_LUA_Skill_OnHit(_Character, _Target, _HitHandle, _SkillId);

// If the skill does not have a target, process via position
IF
CharacterUsedSkillAtPosition(_Character, _X, _Y, _Z, _SkillId, _, _)
THEN
DB_OBSCO_AtPos_Launch(_Character, _X, _Y, _Z, _SkillId);
ProcObjectTimer(_Character, "OdinSCO_AtPos_Launch", 1150);

//Trigger the Skill_AtPos function in Lua
PROC
ProcObjectTimerFinished((CHARACTERGUID)_Character, "OdinSCO_AtPos_Launch")
AND
DB_OBSCO_AtPos_Launch(_Character, _X, _Y, _Z, _SkillId)
THEN
NOT DB_OBSCO_AtPos_Launch(_Character, _X, _Y, _Z, _SkillId);
OBSCO_LUA_Skill_AtPos(_Character, _X, _Y, _Z, _SkillId);
//END_REGION

//REGION Delay - StatusApply
//Delay the application of a status - used when I don't want the status to apply immediately
PROC
OBSCO_QueueStatusApply((CHARACTERGUID)_Target, (STRING)_Status, (GUIDSTRING)_Source, (REAL)_Duration, (INTEGER)_Force, (INTEGER)_Delay)
AND
String(_Target, _TargetString)
AND
StringConcatenate(_TargetString, _Status, _Timer)
THEN
DB_OBSCO_QueueStatusApply(_Target, _Status, _Source, _Duration, _Force, _Timer);
ProcObjectTimer(_Target, _Timer, _Delay);

//Apply the new status
PROC
ProcObjectTimerFinished((CHARACTERGUID)_Target, _Timer)
AND
DB_OBSCO_QueueStatusApply(_Target, _Status, _Source, _Duration, _Force, _Timer)
THEN
NOT DB_OBSCO_QueueStatusApply(_Target, _Status, _Source, _Duration, _Force, _Timer);
ApplyStatus(_Target, _Status, _Duration, _Force, _Source);
//END_REGION

//REGION Delay - DamageOnMove
//Delay the application of an ApplyDamageOnMove status - used for Rupture Tendons' Combo effect
PROC
OBSCO_QueueDamageOnMoveApply((CHARACTERGUID)_Target, (STRING)_Status, (GUIDSTRING)_Source, (REAL)_Duration, (REAL)_DistancePerDamage)
AND
String(_Target, _TargetString)
AND
StringConcatenate(_TargetString, _Status, _Timer)
THEN
DB_OBSCO_QueueDamageOnMoveApply(_Target, _Status, _Source, _Duration, _DistancePerDamage, _Timer);
ProcObjectTimer(_Target, _Timer, 100);

//Apply the new ApplyDamageOnMove status - used for Rupture Tendons' Combo effect
PROC
ProcObjectTimerFinished((CHARACTERGUID)_Target, _Timer)
AND
DB_OBSCO_QueueDamageOnMoveApply(_Target, _Status, _Source, _Duration, _DistancePerDamage, _Timer)
AND
NRD_ApplyDamageOnMove(_Target, _Status, (CHARACTERGUID)_Source, _Duration, _DistancePerDamage, _HitHandle)
THEN
NOT DB_OBSCO_QueueDamageOnMoveApply(_Target, _Status, (GUIDSTRING)_Source, _Duration, _DistancePerDamage, _Timer);
//END_REGION

//REGION Delay - CooldownOverride
//Delay the setting of a skill's cooldown. Used as a workaround to server UI delayed updates
PROC
OBSCO_QueueCooldownOverride((CHARACTERGUID)_Character, (STRING)_SkillId, (REAL)_NewCD)
AND
CharacterHasSkill(_Character, _SkillId, 1)
AND
String(_Character, _CharacterString)
AND
StringConcatenate(_CharacterString, _SkillId, _Timer)
THEN
DB_OBSCO_QueueCooldownOverride(_Character, _SkillId, _NewCD, _Timer);
NRD_SkillSetCooldown(_Character, _SkillId, 0.0);
ProcObjectTimer(_Character, _Timer, 10);

//Set the specified skill cooldown
PROC
ProcObjectTimerFinished((CHARACTERGUID)_Character, _Timer)
AND
DB_OBSCO_QueueCooldownOverride(_Character, _SkillId, _NewCD, _Timer)
THEN
NOT DB_OBSCO_QueueCooldownOverride(_Character, _SkillId, _NewCD, _Timer);
NRD_SkillSetCooldown(_Character, _SkillId, _NewCD);
//END_REGION

//REGION
//Delay the incrementation of Combo - used for multi-hit skills and the like
PROC
ProcObjectTimerFinished((CHARACTERGUID)_Character, "OdinSCO_INCREMENT_COMBO_DELAYED")
THEN
OBSCO_LUA_IncrementComboPoints(_Character, 1);
//END_REGION
EXITSECTION

ENDEXITSECTION
